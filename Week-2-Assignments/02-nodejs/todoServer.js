/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();
const port = 3400;


// let todos = [];
/*
  {id, title, desc, completed}
*/

function retriveTodos(req, res) {
  fs.readFile('todos.json', 'utf8', (err, data) => {
    if (err) {
      // console.log(err);
      // return res.status(500).send('Internal Server Error, Cannot read todos.json');
      throw err;
    }
    return res.status(200).json(JSON.parse(data));
  });
}

function retriveTodoById(req, res) {
  const id = parseInt(req.params.id);
  console.log("Todo requested by id:", id);

  fs.readFile('todos.json', 'utf8', (err, data) => {
    if(err) {
      // console.log(err);
      // return res.status(500).send("Couldn't read from todos.json");
      throw err;
    }
    
    const todos = JSON.parse(data);
    const index = todos.findIndex(todo => todo.id === id);
    
    if(index === -1) {
      return res.status(404).send("Not found");
    }
    return res.status(200).json(todos[index]);
  });
}

function createTodo(req, res) {
  let todo = req.body;
  console.log(todo);

  if(!todo) {
    console.log("Todo object is invalid!");
    return res.status(400).send("Invalid Todo data");
  }

  fs.readFile('todos.json', 'utf8', (err, data) => {
    if(err) {
      // console.log("couldn't read todos.json");
      // return res.status(500).send("Cannot read from file");
      throw err;
    }

    let todos = JSON.parse(data);
    
    let newId = todos.length+1;
    let newTodo = {...todo, id: newId};

    console.log("Todo to be inserted:", newTodo);

    todos.push(newTodo);

    fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
      // console.log(err);
      // return res.status(500).send("Error writting into todos.json");
      if(err) throw err;
      return res.status(201).send(({id: newId}));
    });
  });
}


function updateTodoById(req, res) {
  const id = parseInt(req.params.id);
  let updatedTodo = req.body;
  console.log("Update requested of Todo with id:", id);
  console.log(updatedTodo);

  if(!updatedTodo) {
    console.log("Todo object is invalid! Cannot update");
    return res.status(400).send("Invalid Todo data, cannot update");
  }

  fs.readFile('todos.json', 'utf8', (err, data) => {
    if(err) {
      // console.log("couldn't read todos.json");
      // return res.status(500).send("Cannot read from file");
      if(err) throw err;
    }

    let todos = JSON.parse(data);
    const index = todos.findIndex(todo => todo.id === id);

    if(index === -1) {
      console.log("Couldn't find the given todo.");
      return res.status(404).send("Not found");
    }

    const todo = todos[index];

    Object.keys(updatedTodo).forEach(key => {
      todo[key] = updatedTodo[key];
    });

    fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
      // console.log(err);
      // return res.status(500).send("Error writting into todos.json");
      if(err) throw err;
      return res.status(200).send(todo);
    });
  });
}


function deleteTodoById(req, res) {
  const id = parseInt(req.params.id);
  console.log("Delete requested of Todo with id:", id);

  fs.readFile('todos.json', 'utf8', (err, data) => {
    if(err) {
      // console.log("couldn't read todos.json");
      // return res.status(500).send("Cannot read from file");
      throw err;
    }

    let todos = JSON.parse(data);
    const index = todos.findIndex(todo => todo.id === id);
    
    if(index === -1) {
      console.log("Couldn't find the todo with given id");
      res.status(404).send("Not found");
    }

    todos.splice(index, 1);

    fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
      // console.log(err);
      // return res.status(500).send("Error writting into todos.json");
      if(err) throw err;
      return res.status(200).send(("Deleted successfully"));
    });
  });
}

app.use(bodyParser.json());
app.get('/', retriveTodos);
app.get('/todos', retriveTodos);
app.get('/todos/:id', retriveTodoById);
app.post('/todos', createTodo);
app.put('/todos/:id', updateTodoById);
app.delete('/todos/:id', deleteTodoById);

app.use((req, res) => {
  res.status(404).sendFile(__dirname + '/public/404.html');
});


// app.listen(port, () => {  
//   console.log(`Server listening at http://localhost:${port}`);
// });
module.exports = app;
